@using Kendo.Mvc.UI
@model Planex.Web.Areas.Lead.Models.EstimationEditViewModelSubTask

<script>
    function filterUsers() {
        var skillId = $("#Skill").val();

        $.ajax({
            url: '@Url.Action("GetCascadeUsersWithSkill", "Helper")',
            type: 'GET',
            dataType: 'json',
            cache: false,
            data: { skillId: skillId },
            success: function (users) {
                $("#SelectedUsers").kendoMultiSelect({

                    dataTextField: "value",
                    dataValueField: "id",
                    dataSource: users
                })
                .data("SelectedUsers");
            }
        });

        return;
    }

    function onChangeSkill() {
        filterUsers();
        return;
    }
</script>

@*, new { id = "searchForm" }))*@
@using (Html.BeginForm("SubTaskAdd", null, new { @class = "form", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @(Html.Kendo().DropDownListFor(model => model.ParentId)
              .Name("ParentId")
              .OptionLabel("Select category ...")
              .DataTextField("title")
              .DataValueField("id")
              .DataSource(source =>
              {
                  source.Read(read =>
                  {
                      read.Action("GetAllSubTasks", "Helper");
                  })
                  .ServerFiltering(true);
              })
              .HtmlAttributes(new { value = @Model.ParentName })
              .Value(@Model.ParentId.ToString())
        )

        @Html.EditorFor(model => model.Title)
        @Html.EditorFor(model => model.Description)
        @Html.EditorFor(model => model.Duration)
        @Html.Kendo().Upload().Name("UploadedAttachments")

        @(Html.Kendo().DropDownListFor(model => model.SelectedSkill)
              .Name("SelectedSkill")
              .DataTextField("skill")
              .DataValueField("id")
              .DataSource(source =>
              {
                  source.Read(read =>
                  {
                      read.Action("GetAllSkills", "Helper");
                  })
                  .ServerFiltering(true);
              })
              .Events(e =>
              {
                  e.Close("onChangeSkill");
              })
              .Value(@Model.SelectedSkill)

        )

        <select id="SelectedUsers" name="SelectedUsers" multiple="multiple"></select>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>

    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


