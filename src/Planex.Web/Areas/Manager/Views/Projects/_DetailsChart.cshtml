@using Kendo.Mvc.UI
@using Planex.Web.Areas.Manager.Models


@(Html.Kendo().Gantt<SubTaskViewModel, SubTaskDependencyViewModel>()
    .Name("gantt")
    .Columns(columns =>
    {
        columns.Bound(c => c.TaskID).Title("ID").Width(50);
        columns.Bound("title").Editable(false).Sortable(true);
        columns.Bound("start").Title("Start Time").Format("{0:MM/dd/yyyy}").Width(100).Editable(false).Sortable(true);
        columns.Bound("end").Title("End Time").Format("{0:MM/dd/yyyy}").Width(100).Editable(false).Sortable(true);
        columns.Resources("Resources").Editable(false).Title("Assigned Resources");
    })
    .Views(views =>
    {
        //        views.DayView();
        //        views.WeekView(weekView => weekView.Selected(true));
        views.MonthView();
    })
    // .Height(700)
    .ShowWorkHours(false)
    .ShowWorkDays(true)
    .Snap(false)
    .DataSource(d => d
        .Model(m =>
        {
            m.Id(f => f.TaskID);
            m.ParentId(f => f.ParentID);
            m.OrderId(f => f.OrderId);
            m.Field(f => f.Expanded).DefaultValue(true);
        })
        .Read("ReadSubTasks", "Json")
    //        .Create("CreateTask", "Gantt")
    //        .Destroy("DestroyTask", "Gantt")
    //        .Update("UpdateTask", "Gantt")
    )
    .DependenciesDataSource(d => d
        .Model(m =>
        {
            m.Id(f => f.DependencyID);
            m.PredecessorId(f => f.PredecessorID);
            m.SuccessorId(f => f.SuccessorID);
            m.Type(f => f.Type);
        })
        .Read("ReadSubTaskDependencies", "Json")
    //        .Create("CreateDependency", "Gantt")
    //        .Destroy("DestroyDependency", "Gantt")
    //        .Update("UpdateDependency", "Gantt")
    )
//    .Resources(r => r
//                .Field("resources")
//                .DataColorField("Color")
//                .DataTextField("Name")
//                .DataSource(d => d
//                    .Custom()
//                    .Schema(s => s
//                        .Model(m => m.Id("ResourceId"))
//                        .Data("Data")
//                    )
//                    .Transport(t =>
//                    {
//                        t.Read("ReadSubTaskResources", "Json");
//                    })
//                )
//            )
//        .Assignments<SubTaskAssignentsViewModel>(a => a
//                    .DataTaskIdField("taskId")
//                    .DataResourceIdField("resourceId")
//                    .DataValueField("value")
//                    .DataSource(d => d
//                        .Model(m =>
//                        {
//                            m.Id(f => f.Id);
//                        })
//                        .Read("ReadSubTaskAssignments", "Json")
////                        .Create("CreateAssignment", "Gantt")
////                        .Destroy("DestroyAssignment", "Gantt")
////                        .Update("UpdateAssignment", "Gantt")
//                    )
//                )
)